======================
Скачать актуальную версию Linux Ubuntu при необходимости можно с официального сайта: https://ubuntu.com/download
Также посмотреть информацию о версии ОС можно, например, в содержимом файла /etc/os-release
======================


Просмтр пользователей
cat /etc/passwd

Только имена
sed 's/:.*//' /etc/passwd

Информация о пользователе
id gleb

Зарегестрированные пользователи
w

История входов и логи
last -a
lastlog

--------------------------

создаем пользователя

без пароля

sudo useradd test

с парлем

sudo useradd -p password -s /bin/bash test1

с правами root linux

sudo useradd -o -u 0 -g 0 -s /bin/bash newroot


--------------------------

создаем группу

sudo groupadd name

просмотр групп
cat /etc/group | grep name
sudo vi /etc/group

изменение GID
помощью опции -g;
sudo groupadd -g 1006 name

создание группы в ручную
------------------------
находятся в файле /etc/group
имя_группы:х:gid:список_пользователей

Разберём более подробно, какой параметр за что отвечает:

    имя_группы - имя, которое будет использоваться для операций с группой;
    x - заглушка пароля группы, пароль указывается в файле /etc/gshadow, если в этом есть необходимость;
    gid - идентификатор группы;
    список_пользователей - пользователи, разделённые запятыми, которые входят в группу

group7:x:1007- пример
----------------------
добавление пользователя в группу
sudo usermod -aG group7 имя_пользователя

удаление группы
sudo groupdel имя_группы
----------------------

удаление пользователя
sudo delluser name


удаление учетной записи
sudo deluser --remove-home name

блокировка пароля пользователя
passwd --lock name

запущенные процессы от пользователя
sudo pgrep -u name



подробная инф о процессах
sudo ps -f --pid $(pgrep -u name)

------------------------------
sudo без пароля
имя_пользователя ALL=(ALL) NOPASSWD: ALL

sudo visudo
в текст редакторе нано
под тектом root
name ALL=(ALL) NOPASSWD: ALL
-------------------------------

добавить пользователю права sudo  суперпользователь
добавить а группу sudo
sudo usermod -a -G sudo name

-----------------------------
смена пароля пользоваетля
 sudo passwd user

удаление пароля
 sudo passwd -d user
----------------------------
переключение в вирт консоль всего 7TTY
CTRL+ALT+F1
----------------------------
============================
Пароль новому пользователю безопаснее задавать отдельной командой passwd (или 'usermod -p').
Наравне с командой 'useradd' в Ubuntu (в Debian дистрибутивах) есть скрипт-обертка 'adduser'. Возможно, его потребуется предварителььно установить командой "sudo apt-get install adduser".
Удалить пользователя из группы в Linux можно разными способами. Дополнительно почитать можно тут: https://losst.ru/udalit-polzovatelya-iz-gruppy-linux
===========================
root
изменить пароль root
sudo passwd root

выход из root
exit


============================
============================
============================
ssh
sudo ssh-keygen

загрузка ключа на сервер
sudo ssh-copy-id username@remote_host

Отключение проверки пароля local key

sudo vi /etc/ssh/sshd_config
PasswordAuthentication no
-----------------------------
swap подкачка
free -h просмотр файла
расширенный просмотр
swapon --show 

создание файла подкачки
sudo fallocate -l size /swapfile
установка пароля
sudo chmod 600 /swapfile - это имя
активировать файл прдкачки в ОС
sudo mkswap /swapfile
Запускаем работу файла подкачки
sudo swapon /swapfile

Для того чтобы сделать изменения постоянными, нам необходимо дописать кое-какую информацию в /etc/fstab. 

создание резервной копи
sudo cp /etc/fstab /etc/fstab.back

Через pipeline добаляем строчку "swapfile none swap sw 0 0" при помощи текстового редатора vi в файл sudo tee -a /etc/fstab

echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab


как часто треб исп свов swappines
cat /proc/sys/vm/swappiness

изменнеие файла в vi
sudo vi /etc/sysctl.conf
vm.swappiness= тут нужный размер записываем последней строчкой
выход из vi :wq! c записью


изменнеия размера подкачки файла
отключаем процесс
sudo swapoff /swapfile


sudo fallocate -l 2G /swapfile

Теперь форматируем полученный файл в файловую систему swap:

sudo mkswap /swapfile

А затем включаем его обратно:

sudo swapon /swapfile


удаление файла подкачки
sudo swapoff /swapfile откл
sudo rm /swapfile удаляем


====================================
====================================

мониторинг процессов
ps
ps -eF  cписок всех процессов
ps -fu NAME список процессов пользователя
top
df

Также полезно проводить анализ работы ОС и запущенных в ней служб,
 используя информацию из файлов логов,
 которые расположены в каталоге /var/log,
 либо используя утилиту journalctl.
 Например, journalctl -u ssh покажет журнал работы процесса ssh. 


====================================
====================================
Перераспределение выводов, конвейеры
права длоступа отсортированные 
ls -l | cut -c 1-10 | uniq |sort
ls -l  список прав
 что то директория |wc -l  вывод количество строк
sort<users.csv>users_sort.csv - вывод файла users  в терминал, сортировка, и вывод в результат в файл users_sort





===================================
Удаление процесса

ps
ps -eF  cписок всех процессов
ps -fu NAME список процессов пользователя

ps aux | grep ping  ps  список процессов выводим в терминал конвейер в команду grep  вытаскивавет процесс ping


kill -TERM номер процесса
kill -KILL номер процесса



SIGINT - самый безобидный сигнал завершения, означает Interrupt. Он отправляется процессу, запущенному из терминала с помощью сочетания клавиш Ctrl+C. Процесс правильно завершает все свои действия и возвращает управление;
SIGQUIT - это еще один сигнал, который отправляется с помощью сочетания клавиш, программе, запущенной в терминале. Он сообщает ей что нужно завершиться и программа может выполнить корректное завершение или проигнорировать сигнал. В отличие от предыдущего, она генерирует дамп памяти. Сочетание клавиш Ctrl+/;
SIGHUP - сообщает процессу, что соединение с управляющим терминалом разорвано, отправляется, в основном, системой при разрыве соединения с интернетом;
SIGTERM - немедленно завершает процесс, но обрабатывается программой, поэтому позволяет ей завершить дочерние процессы и освободить все ресурсы;
SIGKILL - тоже немедленно завершает процесс, но, в отличие от предыдущего варианта, он не передается самому процессу, а обрабатывается ядром. Поэтому ресурсы и дочерние процессы остаются запущенными

================================
Для безопасного удаления пустых папок удобно также использовать команду rmdir.
В команде ssh можно использовать как IP-адрес машины, так и ее DNS имя
=================================


=================================
shebang 

Делаем и запускаем файлы bash с инепретатором bash и python

(base) yamamotod@yamamotod-VPCEB1E1R:~$ touch shebang ------- создаем файл
(base) yamamotod@yamamotod-VPCEB1E1R:~$ echo '#!/bin/bash' shebang---- записываем в файл шебанг
#!/bin/bash -----shebang  запуск баш скриптов
или
#!/home/yamamotod/anaconda3/bin/python  --- питоновских скриптов



проверяем директорию
pwd;whoami


в терминале откр редактор vi и создаем файл
vi hello
i- для  редактирования
для сохраненеия shift и :
w- запись
q-выход

для искл след ошибки и разрешения на запись

(base) yamamotod@yamamotod-VPCEB1E1R:~$ ./hello
bash: ./hello: Permission denied
в терминале пишем chmod +x ./имя файлы.(./  обозначает что файл в этой директории)
=====================================

поиск файлов по размеру
find . -size +1G
поиск по имени файла
find  -type f -name "Task*"

узнать версию python
(base) yamamotod@yamamotod-VPCEB1E1R:~$ python --version
Python 3.7.3
узнать путь до python
(base) yamamotod@yamamotod-VPCEB1E1R:~$ which python
/home/yamamotod/anaconda3/bin/python



Запуск из терминала файла python, сначала заходим в исходную директорию
python -i имя.py


$PATH:/opt/my_progs/bin — для сохранения всех путей до исполняемых файлов


==================================
Cкрипт Создать однострочный скрипт, который создаст директории для нескольких годов (2010–2017), в них — поддиректории для месяцев (от 01 до 12), и в каждый из них запишет несколько файлов с произвольными записями. Например, 001.txt, содержащий текст «Файл 001», 002.txt с текстом «Файл 002» и т. д

(base) yamamotod@yamamotod-VPCEB1E1R:~$  mkdir -p {2010..2017}/{01..12} && for i in {2010..2017}; do for m in {01..12}; do for f in {001..007}; do echo "Some"> ./$i/$m/$f.txt; done; done; done
(base) yamamotod@yamamotod-VPCEB1E1R:~$ ls
===================================
Использовать команду AWK на вывод длинного списка каталога, чтобы отобразить только права доступа к файлам. Затем отправить в конвейере этот вывод на sort и uniq, чтобы отфильтровать все повторяющиеся строки.

(base) yamamotod@yamamotod-VPCEB1E1R:/$ ls -l| awk '{print $1}'|sort|uniq
drwx------
drwxrwxrwt
drwxr-xr-x
dr-xr-xr-x
lrwxrwxrwx
-rw-------
total


===============================================
Используя grep, проанализировать файл /var/log/syslog, отобрав события на своё усмотрение.
(base) yamamotod@yamamotod-VPCEB1E1R:/$ cat var/log/syslog| grep CRON
Dec  2 11:45:01 yamamotod-VPCEB1E1R CRON[116437]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Dec  2 11:55:01 yamamotod-VPCEB1E1R CRON[116711]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Dec  2 12:05:01 yamamotod-VPCEB1E1R CRON[116926]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Dec  2 12:15:01 yamamotod-VPCEB1E1R CRON[117154]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Dec  2 12:17:01 yamamotod-VPCEB1E1R CRON[117289]: (root) CMD (   cd / && run-parts --report /etc/cron.hourly)

5
==============================================
Создать разовое задание на перезагрузку операционной системы, используя at.
(base) yamamotod@yamamotod-VPCEB1E1R:~$ python Task5_1.py|at 10:08 120321
warning: commands will be executed using /bin/sh

Traceback (most recent call last):
  File "Task5_1.py", line 23, in <module>
    n = int(input('число'))
ValueError: invalid literal for int() with base 10: ''
job 2 at Fri Dec  3 10:08:00 2021


=========================================
Crontab
Список задач у текущего пользователя:
crontab -l

Список задач у пользователя vasua:
crontab -u vasua -l

============================================
Putty, при необходимости, скачиваем тут: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html
============================================
Добавление репозитория через редактирование файла /etc/apt/source.list 
В текстовом редакторе открываем файл /etc/apt/source.list и в конце файла вводим строку вида: 
deb http://адрес_репозитория версия_дистрибутива ветки 


Например, добавим репозиторий nginx, для этого создадим в каталоге /etc/apt/source.list.d/ файл nginx.list следующего содержания:
deb http://nginx.org/packages/ubuntu focal nginx 


Здесь focal — это версия Ubuntu, а nginx — название ветки, содержащей пакеты, необходимые для установки nginx. Следующий шаг — это установка публичного ключа репозитория, для этого нужна команда apt-key. Скачиваем при помощи curl наш ключ и передаём через pipe утилите apt-key:

curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -

И последний шаг — это обновление информации о пакетах sudo apt update и установка пакета sudo apt install nginx -y. 
==========================================
PPA-репозитории находятся на сайте Launchpad.net, который поддерживается компанией Canonical. Утилита автоматически находит строку для записи в файл репозитория, скачивает и импортирует ключи. Рассмотрим добавление репозитория nginx с использованием PPA-репозитория:

apt-add-repository ppa:nginx/stable 


Здесь утилите apt-add-repository мы говорим, что подключаем PPA-репозиторий, поддерживаемый группой nginx, и подключаем стабильную версию. Утилита автоматически создаст файл /etc/apt/sources.list.d/nginx-ubuntu-stable-focal.list с содержимым, которое мы можем просмотреть при помощи команды cat:

cat /etc/apt/sources.list.d/nginx-ubuntu-stable-focal.list 

"deb http://ppa.launchpad.net/nginx/stable/ubuntu focal main"

==============================================
Управление пакетами через утилиту apt
Это пакетный менеджер, который включает в себя набор утилит для управления пакетами. Он позволяет осуществлять поиск, установку и удаление пакетов, обновлять операционную систему, подключать репозитории. Подключение репозиториев с использованием apt было рассмотрено в предыдущей части. Рассмотрим параметры утилиты apt для управления пакетами:
apt search package_name — поиск пакета;
apt show package_name — посмотреть информацию о пакете;
apt install package_name -y — установить пакет;
apt install package_name1 package_name2 -y — установить два пакета;
apt remove package_name — удалить пакет, при этом сохранятся файлы с настройками;
apt purge package_name — полностью удалить пакет, включая конфигурационные файлы;
apt upgrade — обновить все установленные пакеты;
apt update — обновить информацию о пакетах в репозиториях, указанных в настройках.
Управление пакетами через утилиту dpkg
Dpkg — пакетный менеджер в Debian-подобных системах. Главное отличие от утилиты apt состоит в том, что dpkg работает только с локальными пакетами, он не умеет искать и устанавливать пакеты с репозиториев. Основные параметры утилиты dpkg:
dpkg -l — просмотр списка пакетов;
dpkg -i package_name — установить пакет или группу пакетов;
dpkg -r package_name — удалить пакет или группу пакетов.
Управление пакетами через утилиту snap
Snap — это пакет, который, помимо готовой сборки самого приложения, включает в себя все необходимые зависимости и может работать почти в любом дистрибутиве Linux. В какой-то степени можно считать, что пакеты, установленные при помощи snap, — альтернатива самостоятельной сборке пакета. Пакет, установленный через snap, содержит все необходимые зависимости и может работать в любом окружении Linux. Snap состоит из двух частей: демона snapd и клиента для управления пакетами snap. Установка snapd производится командой apt install snapd -y. Параметры snap:
snap search package_name — поиск пакета;
snap install package_name — установка пакета;
snap refresh package_name — обновление пакета;
snap remove package_name — удаление пакета;
snap list — просмотр установленных пакетов.


SNAP
https://snapcraft.io/docs/installing-snap-on-linux-mint
Это как? Он же в ubuntu/main. Не убрали, а просто спрятали, см. инструкцию на https://snapcraft.io
Если минт то надо удалить фаил блокировки: sudo rm /etc/apt/preferences.d/nosnap.pref После этого даст поставить snapd
apt install snapd -y

=================================================
iptables

iptables -t имя_таблицы -L покажет правиОснова iptables — таблицы, в которых содержатся цепочки с правилами. Основная работа происходит с двумя таблицами: 
Таблица filter. В этой таблице происходит фильтрация входящего и исходящего трафика, а также транзитный трафик.
Таблица nat. Необходима для трансляции адресов и портов.
В каждой таблице есть цепочки — наборы правил, согласно которым обрабатывается тот или иной трафик. У каждой цепочки есть политики по умолчанию, согласно этим политикам трафик обрабатывается, если не попадает ни под одно из правил.
Существует 5 типов стандартных цепочек, встроенных в систему:
PREROUTING — для изначальной обработки входящих пакетов.
INPUT — для входящих пакетов, адресованных непосредственно локальному процессу (клиенту или серверу).
FORWARD — для входящих пакетов, перенаправленных на выход. Заметьте, что перенаправляемые пакеты проходят сначала цепь PREROUTING, затем FORWARD и POSTROUTING.
OUTPUT — для пакетов, генерируемых локальными процессами.
POSTROUTING — для окончательной обработки исходящих пакетов.

Политики для цепочки устанавливаются следующим образом:

iptables -P имя_цепочки Действие 


Например, iptables -P INPUT ACCEPT разрешит весь входящий трафик, действует для таблицы filter. Если нам необходимо установить политику в конкретной таблице, то через параметр -t нужно передать имя таблицы, например: 

iptables -t nat -P INPUT ACCEPT. В Ubuntu ACCEPT — политика по умолчанию для всех таблиц и цепочек. Действует правило: разрешено всё, за исключением того, что запрещено.

Правила в цепочках создаются следующим образом:
iptables -A имя_цепочки -p протокол --dport порт -j действие


Например: 

iptables -A INPUT -p tcp --dport 80 -j ACCEPT. В данном правиле мы добавляем в iptables, в таблицу filter правило, разрешающее подключения по протоколу TCP на порт 80 нашего сервера. 

Также можно разрешить или ограничить подключения для определённых источников, используя параметр -s — source, например: iptables -A INPUT -p tcp -s 192.168.0.100 --dport 80 -j DROP. Здесь мы запретим все подключения по протоколу TCP, исходящие соединения от хоста с IP-адресом 192.168.0.100 на порт 80 нашего сервера.
ла, установленные в таблице. Если не указать имя таблицы, будут показаны правила из цепочки filter. Например, iptables -L покажет правила в цепочках таблицы filter, а 

iptables -t nat -L покажет правила в цепочках таблицы nat.



 sudo apt install iptables


Когда установка iptables будет завершена, можно переходить к настройке, но давайте сначала рассмотрим синтаксис утилиты. Обычно команда имеет такой общий вид:

$ iptables -t таблица действие цепочка дополнительные_параметры

iptables -L

iptables -L INPUT

 sudo iptables -F

Или только для определенной цепочки:

sudo iptables -F Input


Как я уже говорил, если для пакета не подходит ни одно правило, то для него применяется действие по умолчанию. Его можно задать с помощью опции -p:

sudo iptables -p INPUT ACCEPT
$ sudo iptables -p OUTPUT ACCEPT
$ sudo iptables -p FORWARD DROP

Вот так будет выглядеть команда, которая позволяет добавить правило iptables для блокировки всех входящих пакетов от 10.10.10.10:

sudo iptables -A INPUT -s 10.10.10.10 -j DROP

А теперь исходящие пакеты на этот же адрес:

sudo iptables -A OUTPUT -s 10.10.10.10 -j DROP

sudo iptables -A INPUT -s 10.10.10.0/24 -j DROP

Также вы можете заблокировать все входящие соединения ssh:

sudo iptables -A INPUT -p tcp --dport ssh -s 10.10.10.10 -j DROP

от так можно удалить правило iptables, которое было создано вторым:

sudo iptables -A OUTPUT -s 10.10.10.10 -j DROP

вы можете полностью очистить iptables выполнив команду с опцией -F:

sudo iptables -F

настройки iptables, которые вы указали с помощью этих команд сохранятся только до перезагрузки. После перезагрузки компьютера все изменения будут стерты. Поэтому чтобы сохранить правила iptables, нужно выполнить специальную команду. Только в разных дистрибутивах она отличается. В Ubuntu выполните:

sudo /sbin/iptables-save
























































